syntax = "proto3";

package espv2.tests.fuzz.protos;

import "test/fuzz/common.proto";
import "api/envoy/v8/http/service_control/config.proto";
import "validate/validate.proto";

message ServiceControlFilterInput {

  // Filter config.
  espv2.api.envoy.v8.http.service_control.FilterConfig config = 1 [(validate.rules).message.required = true];

  // The user's HTTP request to the filter.
  test.fuzz.HttpData downstream_request = 2 [(validate.rules).message.required = true];

  // The response back from the backend to the user.
  test.fuzz.HttpData upstream_response = 3 [(validate.rules).message.required = true];

  // The stream_info for the connection.
  test.fuzz.StreamInfo stream_info = 4 [(validate.rules).message.required = true];

  // FIXME(nareddyt): The async client response. For now, just use a auto-incrementing index.
  // There should be 4 for the following order: IMDS access token, SC Check, SC Quota, SC Report
  // Due to possibility of retries and intermediate reports, multiply the space by 3.
  // Need at least 1 to allow re-use of the response.
  repeated test.fuzz.HttpData sidestream_response = 5 [(validate.rules).repeated = {min_items: 1, max_items: 12}];
}