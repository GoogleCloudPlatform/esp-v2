// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.api.envoy.http.common;

import "google/protobuf/duration.proto";
import "validate/validate.proto";

// Pattern defines a single pattern to match against
// incoming requests. This pattern matcher is not limited to HTTP requests.
//
// ```yaml
// pattern:
//   uriTemplate: /foo/bar
//   httpMethod: GET
// ```
message Pattern {
  // URI template to match against as defined by
  // [rfc6570](https://tools.ietf.org/html/rfc6570). For example, the
  // following are valid URI templates:
  //
  //     /pets
  //     /pets/{id}
  //     /dictionary/{term:1}/{term}
  //     /search{?q*,lang}
  //
  string uri_template = 1 [(validate.rules).string = {
    well_known_regex: HTTP_HEADER_VALUE,
    strict: false
  }];

  // HTTP request method to match against as defined by
  // [rfc7231](https://tools.ietf.org/html/rfc7231#page-21). For
  // example: GET, HEAD, POST, PUT, DELETE.
  string http_method = 2
      [(validate.rules).string.well_known_regex = HTTP_HEADER_NAME];
}

message HttpUri {
  // The uri string including the domain and path.
  string uri = 1 [(validate.rules).string = {
    min_bytes: 1,
    well_known_regex: HTTP_HEADER_VALUE,
    strict: false
  }];

  // The Envoy cluster name required for Envoy to make a remote call.
  string cluster = 2 [(validate.rules).string.min_bytes = 1];

  // The timeout.
  google.protobuf.Duration timeout = 3
      [(validate.rules).duration.required = true];
}

/* TODO(taoxuy): replace with envoy internal DataSource proto */
message DataSource {
  oneof specifier {
    option (validate.required) = true;

    // Local filesystem data source.
    string filename = 1 [(validate.rules).string.min_bytes = 1];

    // String inlined in the configuration.
    string inline_string = 2 [(validate.rules).string.min_bytes = 1];
  }
}

message AccessToken {
  oneof token_type {
    // remote_token contains:
    // - Token server uri. The Default is
    //   http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/identity
    //   Query parameters are added by the filter
    // - Token cluster address to fetch JWT token.
    HttpUri remote_token = 1;

    // The local path or inline content of the service account json file.
    DataSource service_account_secret = 2;
  }
}

message IamTokenInfo {
  // The Google Cloud IAM server uri.
  api.envoy.http.common.HttpUri iam_uri = 1;

  // Information used to get access token.
  api.envoy.http.common.AccessToken access_token = 2;

  // The Service Account Email.
  string service_account_email = 3;

  // The sequence of service accounts in a delegation chain.
  repeated string delegates = 4;
}
