package routegen_test

import (
	"testing"
	"time"

	"github.com/GoogleCloudPlatform/esp-v2/src/go/configgenerator/routegen"
	"github.com/GoogleCloudPlatform/esp-v2/src/go/configgenerator/routegen/routegentest"
	"github.com/GoogleCloudPlatform/esp-v2/src/go/options"
	servicepb "google.golang.org/genproto/googleapis/api/serviceconfig"
)

func TestNewHealthCheckRouteGensFromOPConfig(t *testing.T) {
	testdata := []routegentest.SuccessOPTestCase{
		{
			Desc: "disabled by default",
			ServiceConfigIn: &servicepb.Service{
				Name: "bookstore.endpoints.project123.cloud.goog",
			},
			OptsIn:         options.ConfigGeneratorOptions{},
			WantHostConfig: `{}`,
		},
		{
			Desc: "standard healthz routes",
			ServiceConfigIn: &servicepb.Service{
				Name: "bookstore.endpoints.project123.cloud.goog",
			},
			OptsIn: options.ConfigGeneratorOptions{
				Healthz: "/healthz",
			},
			WantHostConfig: `
{
  "routes":[
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_HealthCheck"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"GET"
            }
          }
        ],
        "path":"/healthz"
      },
      "name":"espv2_deployment.ESPv2_Autogenerated_HealthCheck",
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    },
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_HealthCheck"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"GET"
            }
          }
        ],
        "path":"/healthz/"
      },
      "name":"espv2_deployment.ESPv2_Autogenerated_HealthCheck",
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    }
  ]
}
			`,
		},
		{
			Desc: "healthz with HSTS",
			ServiceConfigIn: &servicepb.Service{
				Name: "bookstore.endpoints.project123.cloud.goog",
			},
			OptsIn: options.ConfigGeneratorOptions{
				Healthz:    "/healthz",
				EnableHSTS: true,
			},
			WantHostConfig: `
{
  "routes":[
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_HealthCheck"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"GET"
            }
          }
        ],
        "path":"/healthz"
      },
      "name":"espv2_deployment.ESPv2_Autogenerated_HealthCheck",
      "responseHeadersToAdd":[
        {
          "header":{
            "key":"Strict-Transport-Security",
            "value":"max-age=31536000; includeSubdomains"
          }
        }
      ],
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    },
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_HealthCheck"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"GET"
            }
          }
        ],
        "path":"/healthz/"
      },
      "name":"espv2_deployment.ESPv2_Autogenerated_HealthCheck",
      "responseHeadersToAdd":[
        {
          "header":{
            "key":"Strict-Transport-Security",
            "value":"max-age=31536000; includeSubdomains"
          }
        }
      ],
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    }
  ]
}
			`,
		},
		{
			Desc: "healthz with operation name in request header",
			ServiceConfigIn: &servicepb.Service{
				Name: "bookstore.endpoints.project123.cloud.goog",
			},
			OptsIn: options.ConfigGeneratorOptions{
				Healthz:                   "/healthz",
				EnableOperationNameHeader: true,
			},
			WantHostConfig: `
{
  "routes":[
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_HealthCheck"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"GET"
            }
          }
        ],
        "path":"/healthz"
      },
      "name":"espv2_deployment.ESPv2_Autogenerated_HealthCheck",
      "requestHeadersToAdd":[
        {
          "append":false,
          "header":{
            "key":"X-Endpoint-Api-Operation-Name",
            "value":"espv2_deployment.ESPv2_Autogenerated_HealthCheck"
          }
        }
      ],
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    },
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_HealthCheck"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"GET"
            }
          }
        ],
        "path":"/healthz/"
      },
      "name":"espv2_deployment.ESPv2_Autogenerated_HealthCheck",
      "requestHeadersToAdd":[
        {
          "append":false,
          "header":{
            "key":"X-Endpoint-Api-Operation-Name",
            "value":"espv2_deployment.ESPv2_Autogenerated_HealthCheck"
          }
        }
      ],
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    }
  ]
}
			`,
		},

		{
			// Retry config shouldn't matter, but it is generated for consistency.
			Desc: "healthz with modified retry config",
			ServiceConfigIn: &servicepb.Service{
				Name: "bookstore.endpoints.project123.cloud.goog",
			},
			OptsIn: options.ConfigGeneratorOptions{
				Healthz:                   "/healthz",
				BackendRetryNum:           5,
				BackendPerTryTimeout:      time.Second,
				BackendRetryOns:           "reset",
				BackendRetryOnStatusCodes: "500,504",
			},
			WantHostConfig: `
{
  "routes":[
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_HealthCheck"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"GET"
            }
          }
        ],
        "path":"/healthz"
      },
      "name":"espv2_deployment.ESPv2_Autogenerated_HealthCheck",
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":5,
          "perTryTimeout":"1s",
          "retriableStatusCodes":[
            500,
            504
          ],
          "retryOn":"reset,retriable-status-codes"
        },
        "timeout":"15s"
      }
    },
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_HealthCheck"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"GET"
            }
          }
        ],
        "path":"/healthz/"
      },
      "name":"espv2_deployment.ESPv2_Autogenerated_HealthCheck",
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":5,
          "perTryTimeout":"1s",
          "retriableStatusCodes":[
            500,
            504
          ],
          "retryOn":"reset,retriable-status-codes"
        },
        "timeout":"15s"
      }
    }
  ]
}
			`,
		},

		{
			Desc: "healthz with modified deadlines",
			ServiceConfigIn: &servicepb.Service{
				Name: "bookstore.endpoints.project123.cloud.goog",
			},
			OptsIn: options.ConfigGeneratorOptions{
				Healthz:           "/healthz",
				StreamIdleTimeout: time.Hour * 3,
			},
			WantHostConfig: `
{
  "routes":[
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_HealthCheck"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"GET"
            }
          }
        ],
        "path":"/healthz"
      },
      "name":"espv2_deployment.ESPv2_Autogenerated_HealthCheck",
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"10800s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    },
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_HealthCheck"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"GET"
            }
          }
        ],
        "path":"/healthz/"
      },
      "name":"espv2_deployment.ESPv2_Autogenerated_HealthCheck",
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"10800s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    }
  ]
}
			`,
		},
		{
			Desc: "root slash is added in when user doesn't specify",
			ServiceConfigIn: &servicepb.Service{
				Name: "bookstore.endpoints.project123.cloud.goog",
			},
			OptsIn: options.ConfigGeneratorOptions{
				Healthz: "healthz/test/foo",
			},
			WantHostConfig: `
{
  "routes":[
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_HealthCheck"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"GET"
            }
          }
        ],
        "path":"/healthz/test/foo"
      },
      "name":"espv2_deployment.ESPv2_Autogenerated_HealthCheck",
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    },
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_HealthCheck"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"GET"
            }
          }
        ],
        "path":"/healthz/test/foo/"
      },
      "name":"espv2_deployment.ESPv2_Autogenerated_HealthCheck",
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    }
  ]
}
			`,
		},
	}

	for _, tc := range testdata {
		tc.RunTest(t, routegen.NewHealthCheckRouteGensFromOPConfig)
	}
}
