package routegen_test

import (
	"testing"

	"github.com/GoogleCloudPlatform/esp-v2/src/go/configgenerator/routegen"
	"github.com/GoogleCloudPlatform/esp-v2/src/go/configgenerator/routegen/routegentest"
	"github.com/GoogleCloudPlatform/esp-v2/src/go/options"
	annotationspb "google.golang.org/genproto/googleapis/api/annotations"
	servicepb "google.golang.org/genproto/googleapis/api/serviceconfig"
	apipb "google.golang.org/genproto/protobuf/api"
)

func TestNewProxyCORSRouteGenFromOPConfig(t *testing.T) {
	testdata := []routegentest.SuccessOPTestCase{
		{
			Desc: "AllowCors is not enabled, no routes generated",
			ServiceConfigIn: &servicepb.Service{
				Name: "bookstore.endpoints.project123.cloud.goog",
				Apis: []*apipb.Api{
					{
						Name: "endpoints.examples.bookstore.Bookstore",
						Methods: []*apipb.Method{
							{
								Name: "Echo",
							},
						},
					},
				},
				Http: &annotationspb.Http{
					Rules: []*annotationspb.HttpRule{
						{
							Selector: "endpoints.examples.bookstore.Bookstore.Echo",
							Pattern: &annotationspb.HttpRule_Get{
								Get: "/echo",
							},
						},
					},
				},
				Endpoints: []*servicepb.Endpoint{
					{
						Name:      "some-other-endpoint",
						AllowCors: true,
					},
					{
						Name:      "bookstore.endpoints.project123.cloud.goog",
						AllowCors: false,
					},
				},
			},
			OptsIn:         options.ConfigGeneratorOptions{},
			WantHostConfig: `{}`,
		},
		{
			Desc: "Routes generated for single HTTP path",
			ServiceConfigIn: &servicepb.Service{
				Name: "bookstore.endpoints.project123.cloud.goog",
				Apis: []*apipb.Api{
					{
						Name: "endpoints.examples.bookstore.Bookstore",
						Methods: []*apipb.Method{
							{
								Name: "Echo",
							},
						},
					},
				},
				Http: &annotationspb.Http{
					Rules: []*annotationspb.HttpRule{
						{
							Selector: "endpoints.examples.bookstore.Bookstore.Echo",
							Pattern: &annotationspb.HttpRule_Get{
								Get: "/echo",
							},
						},
					},
				},
				Endpoints: []*servicepb.Endpoint{
					{
						Name:      "bookstore.endpoints.project123.cloud.goog",
						AllowCors: true,
					},
				},
			},
			OptsIn: options.ConfigGeneratorOptions{},
			WantHostConfig: `
{
  "routes":[
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_CORS_Echo"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"OPTIONS"
            }
          }
        ],
        "path":"/echo"
      },
      "name":"endpoints.examples.bookstore.Bookstore.ESPv2_Autogenerated_CORS_Echo",
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    },
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_CORS_Echo"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"OPTIONS"
            }
          }
        ],
        "path":"/echo/"
      },
      "name":"endpoints.examples.bookstore.Bookstore.ESPv2_Autogenerated_CORS_Echo",
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    }
  ]
}
`,
		},
		{
			// In this test, the route configs will be in the order of:
			//    GET /foo/bar
			//    * /foo/bar,
			//    GET /foo/*
			//    GET /foo/*/bar
			//    GET /foo/**/bar
			//    GET /foo/**:verb
			//    GET /foo/**
			Desc: "Order route match config for backend routes",
			ServiceConfigIn: &servicepb.Service{
				Name: "bookstore.endpoints.project123.cloud.goog",
				Apis: []*apipb.Api{
					{
						Name: "endpoints.examples.bookstore.Bookstore",
						Methods: []*apipb.Method{
							{
								Name: "Foo",
							},
							{
								Name: "Bar",
							},
						},
					},
				},
				Http: &annotationspb.Http{
					Rules: []*annotationspb.HttpRule{
						{
							Selector: "endpoints.examples.bookstore.Bookstore.Foo",
							Pattern: &annotationspb.HttpRule_Get{
								Get: "/foo/**",
							},
							AdditionalBindings: []*annotationspb.HttpRule{
								{
									Pattern: &annotationspb.HttpRule_Get{
										Get: "/foo/*",
									},
								},
								{
									Pattern: &annotationspb.HttpRule_Get{
										Get: "/foo/**/bar",
									},
								},
							},
						},
						{
							Selector: "endpoints.examples.bookstore.Bookstore.Bar",
							Pattern: &annotationspb.HttpRule_Get{
								Get: "/foo/**:verb",
							},
							AdditionalBindings: []*annotationspb.HttpRule{
								{
									Pattern: &annotationspb.HttpRule_Get{
										Get: "/foo/bar",
									},
								},
								{
									Pattern: &annotationspb.HttpRule_Get{
										Get: "/foo/*/bar",
									},
								},
								{
									Pattern: &annotationspb.HttpRule_Custom{
										Custom: &annotationspb.CustomHttpPattern{
											Path: "/foo/bar",
											Kind: "*",
										},
									},
								},
							},
						},
					},
				},
				Endpoints: []*servicepb.Endpoint{
					{
						Name:      "bookstore.endpoints.project123.cloud.goog",
						AllowCors: true,
					},
				},
			},
			OptsIn: options.ConfigGeneratorOptions{
				Healthz: "healthz",
			},
			WantHostConfig: `
{
  "routes":[
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_CORS_Bar"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"OPTIONS"
            }
          }
        ],
        "path":"/foo/bar"
      },
      "name":"endpoints.examples.bookstore.Bookstore.ESPv2_Autogenerated_CORS_Bar",
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    },
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_CORS_Bar"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"OPTIONS"
            }
          }
        ],
        "path":"/foo/bar/"
      },
      "name":"endpoints.examples.bookstore.Bookstore.ESPv2_Autogenerated_CORS_Bar",
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    },
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_CORS_Foo"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"OPTIONS"
            }
          }
        ],
        "safeRegex":{
          "regex":"^/foo/[^\\/]+\\/?$"
        }
      },
      "name":"endpoints.examples.bookstore.Bookstore.ESPv2_Autogenerated_CORS_Foo",
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    },
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_CORS_Bar"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"OPTIONS"
            }
          }
        ],
        "safeRegex":{
          "regex":"^/foo/[^\\/]+/bar\\/?$"
        }
      },
      "name":"endpoints.examples.bookstore.Bookstore.ESPv2_Autogenerated_CORS_Bar",
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    },
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_CORS_Foo"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"OPTIONS"
            }
          }
        ],
        "safeRegex":{
          "regex":"^/foo/.*/bar\\/?$"
        }
      },
      "name":"endpoints.examples.bookstore.Bookstore.ESPv2_Autogenerated_CORS_Foo",
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    },
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_CORS_Bar"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"OPTIONS"
            }
          }
        ],
        "safeRegex":{
          "regex":"^/foo/.*\\/?:verb$"
        }
      },
      "name":"endpoints.examples.bookstore.Bookstore.ESPv2_Autogenerated_CORS_Bar",
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    },
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_CORS_Foo"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"OPTIONS"
            }
          }
        ],
        "safeRegex":{
          "regex":"^/foo/.*\\/?$"
        }
      },
      "name":"endpoints.examples.bookstore.Bookstore.ESPv2_Autogenerated_CORS_Foo",
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    }
  ]
}
`,
		},
		{
			// TODO(nareddyt): Current behavior generates routes for wildcard methods.
			// Fix this bug (and modify test output) in follow-up CL.
			Desc: "Routes not generated for pre-existing OPTIONS and wildcard methods",
			ServiceConfigIn: &servicepb.Service{
				Name: "bookstore.endpoints.project123.cloud.goog",
				Apis: []*apipb.Api{
					{
						Name: "endpoints.examples.bookstore.Bookstore",
						Methods: []*apipb.Method{
							{
								Name: "Echo",
							},
						},
					},
				},
				Http: &annotationspb.Http{
					Rules: []*annotationspb.HttpRule{
						{
							Selector: "endpoints.examples.bookstore.Bookstore.Echo",
							Pattern: &annotationspb.HttpRule_Custom{
								Custom: &annotationspb.CustomHttpPattern{
									Kind: "OPTIONS",
									Path: "/options/echo",
								},
							},
							AdditionalBindings: []*annotationspb.HttpRule{
								{
									Pattern: &annotationspb.HttpRule_Custom{
										Custom: &annotationspb.CustomHttpPattern{
											Kind: "*",
											Path: "/wildcard/echo",
										},
									},
								},
							},
						},
					},
				},
				Endpoints: []*servicepb.Endpoint{
					{
						Name:      "bookstore.endpoints.project123.cloud.goog",
						AllowCors: true,
					},
				},
			},
			OptsIn: options.ConfigGeneratorOptions{},
			WantHostConfig: `
{
  "routes":[
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_CORS_Echo"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"OPTIONS"
            }
          }
        ],
        "path":"/wildcard/echo"
      },
      "name":"endpoints.examples.bookstore.Bookstore.ESPv2_Autogenerated_CORS_Echo",
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    },
    {
      "decorator":{
        "operation":"ingress ESPv2_Autogenerated_CORS_Echo"
      },
      "match":{
        "headers":[
          {
            "name":":method",
            "stringMatch":{
              "exact":"OPTIONS"
            }
          }
        ],
        "path":"/wildcard/echo/"
      },
      "name":"endpoints.examples.bookstore.Bookstore.ESPv2_Autogenerated_CORS_Echo",
      "route":{
        "cluster":"backend-cluster-bookstore.endpoints.project123.cloud.goog_local",
        "idleTimeout":"300s",
        "retryPolicy":{
          "numRetries":1,
          "retryOn":"reset,connect-failure,refused-stream"
        },
        "timeout":"15s"
      }
    }
  ]
}
`,
		},
	}
	for _, tc := range testdata {
		tc.RunTest(t, routegen.NewProxyCORSRouteGenFromOPConfig)
	}
}
